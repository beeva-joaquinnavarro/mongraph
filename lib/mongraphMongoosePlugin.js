// Generated by CoffeeScript 1.6.2
var exports, mongraphMongoosePlugin;

module.exports = exports = mongraphMongoosePlugin = function(schema, options) {
  var _base, _base1, _ref, _ref1, _ref2, _ref3;

  if (options == null) {
    options = {};
  }
  schema.add({
    _node_id: Number
  });
  if ((_ref = options.storeNodeID) == null) {
    options.storeNodeID = true;
  }
  if ((_ref1 = options.relations) == null) {
    options.relations = {};
  }
  if ((_ref2 = (_base = options.relations).removeAllOutgoing) == null) {
    _base.removeAllOutgoing = true;
  }
  if ((_ref3 = (_base1 = options.relations).removeAllIncoming) == null) {
    _base1.removeAllIncoming = true;
  }
  schema.pre('remove', function(errHandler) {
    var direction, doc;

    doc = this;
    if (options.relations.removeAllOutgoing && options.relations.removeAllOutgoing) {
      direction = 'both';
    } else if (options.relations.removeAllOutgoing) {
      direction = 'outgoing';
    } else if (options.relations.removeAllIncoming) {
      direction = 'incoming';
    }
    return doc.getNode(function(errGettingNode, node) {
      if (errGettingNode) {
        return cb(errGettingNode);
      }
      return doc.removeRelationships('*', {
        direction: direction
      }, function(errRemoveRelationships) {
        return node["delete"](function(errDeletingNode) {
          if (errRemoveRelationships) {
            return cb(errRemoveRelationships);
          }
          if (errDeletingNode) {
            return cb(errDeletingNode);
          }
          return cb(null, null);
        });
      });
    });
  });
  return schema.pre('save', function(next) {
    var doc;

    doc = this;
    if (options.storeNodeID !== true) {
      return next();
    }
    return doc.findOrCreateCorrespondingNode(function(err, node) {
      if (node) {
        doc._node_id = node.id;
      }
      return next();
    });
  });
};
