// Generated by CoffeeScript 1.6.2
var config, constructorNameOf, init, processtools, useBidirectionalRelations;

processtools = require('./processtools');

constructorNameOf = processtools.constructorNameOf;

config = {};

useBidirectionalRelations = function(trueOrFalse) {
  return config.options.relationships.bidirectional = Boolean(trueOrFalse);
};

init = function(options) {
  var functionName, node, _base, _base1, _base2, _base3, _base4, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;

  if (options == null) {
    options = {};
  }
  config.options = options;
  config.mongodb = options != null ? options.mongodb : void 0;
  config.mongoose = options != null ? options.mongoose : void 0;
  config.graphdb = options != null ? options.neo4j : void 0;
  if ((_ref = (_base = config.options).overwriteProtypeFunctions) == null) {
    _base.overwriteProtypeFunctions = false;
  }
  if ((_ref1 = (_base1 = config.options).storeDocumentInGraphDatabase) == null) {
    _base1.storeDocumentInGraphDatabase = false;
  }
  if ((_ref2 = (_base2 = config.options).cacheNodes) == null) {
    _base2.cacheNodes = true;
  }
  config.options.loadMongoDBRecords = true;
  if ((_ref3 = (_base3 = config.options).relationships) == null) {
    _base3.relationships = {};
  }
  config.options.relationships.storeTimestamp = true;
  config.options.relationships.storeIDsInRelationship = true;
  if ((_ref4 = (_base4 = config.options.relationships).bidirectional) == null) {
    _base4.bidirectional = false;
  }
  if (constructorNameOf(config.mongoose) !== 'Mongoose') {
    throw new Error("mongraph needs a mongoose reference as parameter");
  }
  if (constructorNameOf(config.graphdb) !== 'GraphDatabase') {
    throw new Error("mongraph needs a neo4j graphdatabase reference as paramater");
  }
  if (config.options.overwriteProtypeFunctions !== true) {
    _ref5 = ["getRelationships", "createRelationshipTo", "deleteRelationshipTo", "getNode", "findEquivalentNode", "findOrCreateEquivalentNode", "getRelatedDocuments", "_graph"];
    for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
      functionName = _ref5[_i];
      if (typeof config.mongoose.Document.prototype[functionName] !== 'undefined') {
        throw new Error("Will not override mongoose::Document.prototype." + functionName);
      }
    }
    node = config.graphdb.createNode();
    _ref6 = ["getCollectionName", "getMongoId"];
    for (_j = 0, _len1 = _ref6.length; _j < _len1; _j++) {
      functionName = _ref6[_j];
      if (typeof node.constructor.prototype[functionName] !== 'undefined') {
        throw new Error("Will not override neo4j::Node.prototype." + functionName);
      }
    }
  }
  require('./extendDocument')(config.mongoose, config.graphdb, config.options);
  return require('./extendNode')(config.graphdb, config.mongoose, config.options);
};

module.exports = {
  init: init,
  config: config,
  processtools: processtools,
  useBidirectionalRelations: useBidirectionalRelations
};
