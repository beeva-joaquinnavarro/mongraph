// Generated by CoffeeScript 1.6.2
var config, init, mongraphMongoosePlugin, processtools, _;

processtools = require('./processtools');

mongraphMongoosePlugin = require('./mongraphMongoosePlugin');

_ = require('underscore');

config = {
  options: {}
};

init = function(options) {
  var _base, _base1, _base2, _base3, _base4, _base5, _base6, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;

  if (typeof options !== 'object') {
    options = {};
  }
  _.extend(config.options, options);
  config.mongoose = options.mongoose;
  config.graphdb = options.neo4j;
  if ((_ref = (_base = config.options).overwriteProtypeFunctions) == null) {
    _base.overwriteProtypeFunctions = false;
  }
  if ((_ref1 = (_base1 = config.options).storeDocumentInGraphDatabase) == null) {
    _base1.storeDocumentInGraphDatabase = false;
  }
  if ((_ref2 = (_base2 = config.options).cacheNodes) == null) {
    _base2.cacheNodes = true;
  }
  if ((_ref3 = (_base3 = config.options).loadMongoDBRecords) == null) {
    _base3.loadMongoDBRecords = true;
  }
  if ((_ref4 = (_base4 = config.options).extendSchemaWithMongoosePlugin) == null) {
    _base4.extendSchemaWithMongoosePlugin = true;
  }
  if ((_ref5 = (_base5 = config.options).relationships) == null) {
    _base5.relationships = {};
  }
  config.options.relationships.storeTimestamp = true;
  config.options.relationships.storeIDsInRelationship = true;
  if ((_ref6 = (_base6 = config.options.relationships).bidirectional) == null) {
    _base6.bidirectional = false;
  }
  config.options.mongoose = options.mongoose;
  config.options.graphdb = options.neo4j;
  if (processtools.constructorNameOf(config.mongoose) !== 'Mongoose') {
    throw new Error("mongraph needs a mongoose reference as parameter");
  }
  if (processtools.constructorNameOf(config.graphdb) !== 'GraphDatabase') {
    throw new Error("mongraph needs a neo4j graphdatabase reference as paramater");
  }
  require('./extendDocument')(config.options);
  require('./extendNode')(config.options);
  if (config.options.extendSchemaWithMongoosePlugin) {
    return config.mongoose.plugin(mongraphMongoosePlugin);
  }
};

module.exports = {
  init: init,
  config: config,
  processtools: processtools
};
