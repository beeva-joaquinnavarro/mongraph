// Generated by CoffeeScript 1.6.2
var processtools;

processtools = require('./processtools');

module.exports = function(graphdb, mongoose, options) {
  var Node, functionName, node, _i, _len, _loadDocumentFromNode, _loadDocumentFromNodeUrl, _ref;

  if (options.overwriteProtypeFunctions !== true) {
    node = graphdb.createNode();
    _ref = ['getDocument', 'getMongoId', 'getCollectionName'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      functionName = _ref[_i];
      if (typeof node.constructor.prototype[functionName] !== 'undefined') {
        throw new Error("Will not override neo4j::Node.prototype." + functionName);
      }
    }
  }
  node = graphdb.createNode();
  Node = node.constructor;
  _loadDocumentFromNode = function(node, cb) {
    var collection, collectionName, _id, _ref1;

    if (!(node != null ? (_ref1 = node._data) != null ? _ref1.data : void 0 : void 0)) {
      return cb("No node object given", cb);
    }
    _id = new processtools.getObjectIdFromString(node.getMongoId());
    collectionName = node.getCollectionName();
    if (typeof cb !== 'function') {
      cb(new Error("No cb given", null));
    }
    collection = processtools.getCollectionByCollectionName(collectionName, mongoose);
    return collection.findOne({
      _id: _id
    }, cb);
  };
  _loadDocumentFromNodeUrl = function(url, cb) {
    return graphdb.getNode(url, function(err, node) {
      if (err) {
        return cb(err, node);
      }
      return _loadDocumentFromNode(node, cb);
    });
  };
  Node.prototype.getCollectionName = function() {
    var _ref1, _ref2, _ref3, _ref4;

    return ((_ref1 = this._data) != null ? (_ref2 = _ref1.indexed) != null ? (_ref3 = _ref2.match(/\/data\/index\/node\/(.+?)\//)) != null ? _ref3[1] : void 0 : void 0 : void 0) || ((_ref4 = this._data) != null ? _ref4.data.collection : void 0);
  };
  Node.prototype.getMongoId = function() {
    var _ref1, _ref2;

    return (_ref1 = this._data) != null ? (_ref2 = _ref1.data) != null ? _ref2._id : void 0 : void 0;
  };
  return Node.prototype.getDocument = function(cb) {
    var _ref1, _ref2, _ref3;

    if (this.document && typeof cb === 'function') {
      return cb(null, this.document);
    }
    if ((_ref1 = this._data) != null ? (_ref2 = _ref1.data) != null ? _ref2._id : void 0 : void 0) {
      return _loadDocumentFromNode(this, cb);
    } else {
      return _loadDocumentFromNodeUrl((_ref3 = this._data) != null ? _ref3.self : void 0, cb);
    }
  };
};
