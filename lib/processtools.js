// Generated by CoffeeScript 1.6.2
var Join, ObjectId, constructorNameOf, getObjectIDAsString, getObjectIDsAsArray, getObjectIdFromString, loadDocumentsFromRelationshipArray, sortOptionsAndCallback, _extractCollectionAndId;

ObjectId = require('mongodb').ObjectID;

Join = require('join');

sortOptionsAndCallback = function(options, cb) {
  if (typeof options === 'function') {
    return {
      options: {},
      cb: options
    };
  } else {
    return {
      options: options || {},
      cb: cb
    };
  }
};

constructorNameOf = function(f) {
  var _ref, _ref1;

  return f != null ? (_ref = f.constructor) != null ? (_ref1 = _ref.toString().match(/function\s+(.+?)\(/)[1]) != null ? _ref1.trim() : void 0 : void 0 : void 0;
};

_extractCollectionAndId = function(s) {
  var parts;

  if ((parts = s.split(":"))) {
    return {
      collectionName: parts[0],
      _id: parts[1]
    };
  }
};

getObjectIDAsString = function(obj) {
  if (typeof obj === 'string') {
    return obj;
  } else if (typeof obj === 'object') {
    return String(obj._id || obj);
  } else {
    return '';
  }
};

getObjectIdFromString = function(s) {
  return new ObjectId(s);
};

getObjectIDsAsArray = function(mixed) {
  var id, ids, item, _i, _len;

  ids = [];
  if ((mixed != null ? mixed.constructor : void 0) === Array) {
    for (_i = 0, _len = mixed.length; _i < _len; _i++) {
      item = mixed[_i];
      if (id = getObjectIDAsString(item)) {
        ids.push(id);
      }
    }
  } else {
    ids = [getObjectIDAsString(mixed)];
  }
  return ids;
};

loadDocumentsFromRelationshipArray = function(mongodb, array, cb) {
  var documents, i, join, relation, relations, _fn, _i, _j, _len, _len1;

  if (constructorNameOf(mongodb) !== 'NativeConnection') {
    return cb('Need db connection as argument', null);
  }
  if (!((array != null ? array.constructor : void 0) === Array || (array = getObjectIDsAsArray(array)).constructor === Array)) {
    return cb('No Array given', null);
  }
  relations = [];
  documents = [];
  for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
    relation = array[i];
    if (constructorNameOf(relation) === 'Relationship') {
      relations.push(relation);
    }
  }
  if (!(relations.length > 0)) {
    return cb(null, null);
  }
  join = Join.create();
  _fn = function(i, relation) {
    var callbackFrom, callbackTo, collectionName, id, _id, _ref, _ref1;

    _ref = _extractCollectionAndId(relation.data._to), collectionName = _ref.collectionName, _id = _ref._id;
    id = getObjectIdFromString(_id);
    callbackTo = join.add();
    mongodb.collection(collectionName).findOne({
      _id: id
    }, function(err, doc) {
      relation.to = doc;
      return callbackTo(err, relation);
    });
    _ref1 = _extractCollectionAndId(relation.data._from), collectionName = _ref1.collectionName, _id = _ref1._id;
    id = getObjectIdFromString(_id);
    callbackFrom = join.add();
    return mongodb.collection(collectionName).findOne({
      _id: id
    }, function(err, doc) {
      relation.from = doc;
      return callbackFrom(err, relation);
    });
  };
  for (i = _j = 0, _len1 = relations.length; _j < _len1; i = ++_j) {
    relation = relations[i];
    _fn(i, relation);
  }
  return join.when(function() {
    return cb(null, relations, documents);
  });
};

module.exports = {
  getObjectIDAsString: getObjectIDAsString,
  getObjectIDsAsArray: getObjectIDsAsArray,
  loadDocumentsFromRelationshipArray: loadDocumentsFromRelationshipArray,
  constructorNameOf: constructorNameOf,
  getObjectIdFromString: getObjectIdFromString,
  sortOptionsAndCallback: sortOptionsAndCallback
};
