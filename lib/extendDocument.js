// Generated by CoffeeScript 1.6.2
var processtools;

processtools = require('./processtools');

module.exports = function(mongoose, graphdb, globalOptions) {
  var Document, node, _queryGraphDB;

  Document = mongoose.Document;
  processtools.setMongoose(mongoose);
  node = graphdb.createNode();
  Document.prototype._graphdb = {
    db: graphdb
  };
  _queryGraphDB = function(cypher, options, cb) {
    var _ref, _ref1, _ref2;

    _ref = processtools.sortOptionsAndCallback(options, cb), options = _ref.options, cb = _ref.cb;
    if ((_ref1 = options.loadDocuments) == null) {
      options.loadDocuments = true;
    }
    if ((_ref2 = options.countRelationships) == null) {
      options.countRelationships = false;
    }
    return graphdb.query(cypher, function(err, map) {
      var data, result;

      if (err) {
        err.query = cypher;
      }
      options.cypherQuery = cypher;
      if (options.loadDocuments && (map != null ? map.length : void 0) > 0) {
        data = (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = map.length; _i < _len; _i++) {
            result = map[_i];
            if (options.processPart) {
              _results.push(result[options.processPart]);
            } else {
              _results.push(result[Object.keys(result)[0]]);
            }
          }
          return _results;
        })();
        if (processtools.constructorNameOf(data[0]) === 'Relationship') {
          return processtools.loadDocumentsFromRelationshipArray(data, options, cb);
        } else {
          return processtools.loadDocumentsFromNodeArray(data, options, cb);
        }
      } else {
        if (typeof cb === 'function') {
          return cb(err, map, options);
        }
      }
    });
  };
  Document.prototype.findCorrespondingNode = function(cb, doCreateIfNotExists) {
    var collectionName, doc, id;

    if (doCreateIfNotExists == null) {
      doCreateIfNotExists = false;
    }
    doc = this;
    collectionName = doc.constructor.collection.name;
    id = processtools.getObjectIDAsString(doc);
    return graphdb.getIndexedNode(collectionName, '_id', id, function(foundErr, node) {
      if (node) {
        node.document = doc;
      }
      if (doCreateIfNotExists && !node) {
        node = graphdb.createNode({
          _id: id,
          collection: collectionName
        });
        if (globalOptions.storeDocumentInGraphDatabase) {
          node.data = doc.toObject(globalOptions.storeDocumentInGraphDatabase);
        }
        return node.save(function(saveErr) {
          if (saveErr) {
            return cb(saveErr, node);
          }
          return node.index(collectionName, '_id', id, function(indexErr) {
            node.document = doc;
            return cb(indexErr, node);
          });
        });
      } else {
        if (typeof cb === 'function') {
          return cb(null, node);
        }
      }
    });
  };
  Document.prototype.findOrCreateCorrespondingNode = function(cb) {
    return this.findCorrespondingNode(cb, true);
  };
  Document.prototype.getNode = Document.prototype.findOrCreateCorrespondingNode;
  Document.prototype.getNodeId = function(cb) {
    if (this._node_id) {
      return cb(null, this._node_id);
    } else {
      return this.getNode(cb);
    }
  };
  Document.prototype.createRelationshipTo = function(doc, kindOfRelationship, attributes, cb) {
    var _ref, _ref1, _ref2;

    if (attributes == null) {
      attributes = {};
    }
    if (typeof attributes === 'function') {
      cb = attributes;
      attributes = {};
    }
    if (globalOptions.relationships.storeIDsInRelationship) {
      if ((_ref = attributes._to) == null) {
        attributes._to = doc.constructor.collection.name + ":" + String(doc._id);
      }
      if ((_ref1 = attributes._from) == null) {
        attributes._from = this.constructor.collection.name + ":" + String(this._id);
      }
    }
    if (globalOptions.relationships.storeTimestamp) {
      if ((_ref2 = attributes._created_at) == null) {
        attributes._created_at = Math.floor(Date.now() / 1000);
      }
    }
    return this.findOrCreateCorrespondingNode(function(fromErr, from) {
      return doc.findOrCreateCorrespondingNode(function(toErr, to) {
        if (from && to) {
          return from.createRelationshipTo(to, kindOfRelationship, attributes, cb);
        } else {
          if (typeof cb === 'function') {
            return cb(fromErr || toErr, null);
          }
        }
      });
    });
  };
  Document.prototype.createRelationshipFrom = function(doc, kindOfRelationship, attributes, cb) {
    if (attributes == null) {
      attributes = {};
    }
    return doc.createRelationshipTo(this, kindOfRelationship, attributes, cb);
  };
  Document.prototype.createRelationshipBetween = function(doc, kindOfRelationship, attributes, cb) {
    var found, self;

    if (attributes == null) {
      attributes = {};
    }
    self = this;
    found = [];
    return this.createRelationshipTo(doc, kindOfRelationship, attributes, function(err, first) {
      if (err) {
        return cb(err);
      }
      found.push(first);
      return doc.createRelationshipTo(self, kindOfRelationship, attributes, function(err, second) {
        if (err) {
          return cb(err);
        }
        found.push(second);
        if (typeof cb === 'function') {
          return cb(err, found);
        }
      });
    });
  };
  Document.prototype.queryGraph = function(chypherQuery, options, cb) {
    var doc, _ref;

    _ref = processtools.sortOptionsAndCallback(options, cb), options = _ref.options, cb = _ref.cb;
    doc = this;
    return _queryGraphDB(chypherQuery, options, cb);
  };
  Document.prototype.queryRelationships = function(kindOfRelationship, options, cb) {
    var doc, id, _ref, _ref1, _ref2, _ref3, _ref4, _s;

    _s = require('underscore.string');
    if (typeof options === 'string') {
      options = {
        query: options
      };
    }
    _ref = processtools.sortOptionsAndCallback(options, cb), options = _ref.options, cb = _ref.cb;
    if (kindOfRelationship == null) {
      kindOfRelationship = '*';
    }
    kindOfRelationship = /^[*:]{1}$/.test(kindOfRelationship) || !kindOfRelationship ? '' : ':' + kindOfRelationship;
    if ((_ref1 = options.direction) == null) {
      options.direction = 'both';
    }
    if ((_ref2 = options.action) == null) {
      options.action = "RETURN";
    }
    if ((_ref3 = options.processPart) == null) {
      options.processPart = "relation";
    }
    if ((_ref4 = options.endNode) == null) {
      options.endNode = "";
    }
    if (typeof endNode === 'object') {
      options.endNode = endNode.id;
    }
    doc = this;
    id = processtools.getObjectIDAsString(doc);
    return this.getNode(function(nodeErr, fromNode) {
      var cypher, _ref5;

      cypher = "START a = node(%(id)s)%(endNode)s\nMATCH (a)%(incoming)s[relation%(relation)s]%(outgoing)s(b)\n%(action)s %(processPart)s;";
      cypher = _s.sprintf(cypher, {
        id: fromNode.id,
        incoming: options.direction === 'incoming' ? '<-' : '-',
        outgoing: options.direction === 'outgoing' ? '->' : '-',
        relation: kindOfRelationship,
        action: options.action.toUpperCase(),
        processPart: options.processPart,
        endNode: options.endNode ? ", b = node(" + options.endNode + ")" : ''
      });
      if ((_ref5 = options.startNode) == null) {
        options.startNode = fromNode.id;
      }
      if (options.query) {
        cypher = query;
      }
      if (options.dontExecute) {
        return cb({
          message: "`dontExecute` options is set",
          query: cypher,
          options: options
        }, null);
      } else {
        return _queryGraphDB(cypher, options, cb);
      }
    });
  };
  Document.prototype.allRelationships = function(kindOfRelationship, options, cb) {
    var _ref;

    _ref = processtools.sortOptionsAndCallback(options, cb), options = _ref.options, cb = _ref.cb;
    options.direction = 'both';
    return this.queryRelationships(kindOfRelationship, options, cb);
  };
  Document.prototype.incomingRelationships = function(kindOfRelationship, options, cb) {
    var _ref;

    _ref = processtools.sortOptionsAndCallback(options, cb), options = _ref.options, cb = _ref.cb;
    options.direction = 'incoming';
    return this.queryRelationships(kindOfRelationship, options, cb);
  };
  Document.prototype.outgoingRelationships = function(kindOfRelationship, options, cb) {
    var _ref;

    _ref = processtools.sortOptionsAndCallback(options, cb), options = _ref.options, cb = _ref.cb;
    options.direction = 'outgoing';
    return this.queryRelationships(kindOfRelationship, options, cb);
  };
  Document.prototype.removeRelationshipsTo = function(doc, kindOfRelationship, options, cb) {
    var from, _ref, _ref1;

    _ref = processtools.sortOptionsAndCallback(options, cb), options = _ref.options, cb = _ref.cb;
    if ((_ref1 = options.direction) == null) {
      options.direction = 'outgoing';
    }
    options.action = 'DELETE';
    from = this;
    return doc.getNode(function(nodeErr, endNode) {
      if (nodeErr) {
        return cb(nodeErr, endNode);
      }
      options.endNode = endNode.id;
      return from.queryRelationships(kindOfRelationship, options, cb);
    });
  };
  Document.prototype.removeRelationshipsFrom = function(doc, kindOfRelationship, options, cb) {
    var to;

    to = this;
    return doc.removeRelationshipsTo(to, kindOfRelationship, options, cb);
  };
  Document.prototype.removeRelationshipsBetween = function(doc, kindOfRelationship, options, cb) {
    var _ref;

    _ref = processtools.sortOptionsAndCallback(options, cb), options = _ref.options, cb = _ref.cb;
    options.direction = 'both';
    return this.removeRelationshipsTo(doc, kindOfRelationship, options, cb);
  };
  Document.prototype.removeRelationships = function(kindOfRelationship, options, cb) {
    var _ref;

    _ref = processtools.sortOptionsAndCallback(options, cb), options = _ref.options, cb = _ref.cb;
    options.direction = 'both';
    options.action = 'DELETE';
    return this.queryRelationships(kindOfRelationship, options, cb);
  };
  return Document.prototype.shortestPathTo = function(doc, kindOfRelationship, options, cb) {
    var from, to, _ref;

    _ref = processtools.sortOptionsAndCallback(options, cb), options = _ref.options, cb = _ref.cb;
    from = this;
    to = doc;
    return from.getNode(function(errFrom, fromNode) {
      return to.getNode(function(errTo, toNode) {
        var levelDeepness, query;

        if (errFrom || errTo || !fromNode || !toNode) {
          return cb(new Error("Problem(s) getting from and/or to node"));
        }
        levelDeepness = 15;
        query = "START a = node(" + fromNode.id + "), b = node(" + toNode.id + ") \nMATCH p = shortestPath( a-[*.." + levelDeepness + "]->b )\nRETURN p;";
        return from.queryGraph(query, options, cb);
      });
    });
  };
};
